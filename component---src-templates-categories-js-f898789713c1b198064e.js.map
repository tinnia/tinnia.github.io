{"version":3,"sources":["webpack:///./src/templates/categories.js"],"names":["Categories","tags","pageContext","data","location","siteTitle","site","siteMetadata","title","category","nodes","allMarkdownRemark","style","textAlign","color","margin","marginBottom","padding","boxShadow","width","map","tag","tmp","kebabCase","url","key","variant","fontWeight","border","backgroundColor","href","listStyle","marginTop","post","frontmatter","fields","slug","className","itemScope","itemType","to","path","itemProp","date","dangerouslySetInnerHTML","__html","description","pageQuery"],"mappings":"4FAAA,2JAsEeA,UA5DI,SAAC,GAAqC,IAAD,EAIhDC,EAJcC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC/BC,GAAY,UAAAF,EAAKG,KAAKC,oBAAV,eAAwBC,QAAxB,QACVC,EAAaP,EAAbO,SACAC,EAAUP,EAAKQ,kBAAfD,MAYR,OARIT,EADa,cAAbQ,EACO,CAAC,MAAM,MAAM,cAAc,QACd,UAAbA,EACA,CAAC,MAAM,cAAe,KAAM,OAE7B,CAAC,MAAM,MAAO,SAAU,QAK9B,kBAAC,IAAD,CAAQL,SAAUA,EAAUI,MAAOH,GAC/B,kBAAC,IAAD,CAAKG,MAAM,cACX,6BACI,wBAAII,MAAO,CAAEC,UAAW,SAAUC,MAAM,UAAWC,OAAO,KAAON,GACjE,yBAAKG,MAAO,CAAEI,aAAa,GAAIC,QAAQ,KACnC,kBAAC,IAAD,CAAaL,MAAO,CAAEM,UAAU,mBAAoBC,MAAM,SACrDlB,EAAKmB,KAAI,SAAAC,GACN,IAAMC,EAAc,QAARD,EAAgB,GAAKE,IAAUF,GACrCG,EAAM,IAAMf,EAAW,IAAMa,EACnC,OACI,kBAAC,IAAD,CAAQG,IAAKJ,EAAKK,QAAQ,QAAQd,MAAa,QAANS,EAAc,CAACM,WAAW,OAAQb,MAAM,cAAec,OAAO,EAAGC,gBAAgB,WAAa,CAACf,MAAM,cAAee,gBAAgB,YAAaD,OAAO,EAAGD,WAAW,QAASG,KAAMN,GAAMH,OAIhP,wBAAIT,MAAO,CAAEmB,UAAU,OAASlB,UAAU,OAAQmB,UAAU,KACvDtB,EAAMU,KAAI,SAAAa,GACP,IAAMzB,EAAQyB,EAAKC,YAAY1B,MAC/B,OACI,wBAAII,MAAO,CAAEoB,UAAU,GAAIhB,aAAa,IAAMS,IAAKQ,EAAKE,OAAOC,MAC3D,6BAASC,UAAU,iBAAiBC,WAAS,EAACC,SAAS,6BACvD,gCACI,wBAAI3B,MAAO,CAAEI,aAAc,IAC3B,kBAAC,OAAD,CAAMJ,MAAO,CAAEE,MAAO,WAAa0B,GAAIP,EAAKC,YAAYO,KAAMC,SAAS,OACnE,0BAAMA,SAAS,YAAYlC,KAG/B,2BAAOI,MAAO,CAACE,MAAM,cAAemB,EAAKC,YAAYS,OAEzD,iCACI,uBAAG/B,MAAO,CAACE,MAAM,QAAS8B,wBAAyB,CAAEC,OAAQZ,EAAKC,YAAYY,aAAeJ,SAAS,kBAG1G,sCAa7B,IAAMK,EAAS","file":"component---src-templates-categories-js-f898789713c1b198064e.js","sourcesContent":["import React from \"react\"\r\nimport { Link, graphql } from \"gatsby\"\r\n\r\n// Components\r\nimport kebabCase from \"lodash/kebabCase\"\r\nimport { ButtonGroup, Button } from 'react-bootstrap'\r\n\r\nimport Layout from \"../components/layout\"\r\nimport SEO from \"../components/seo\"\r\n\r\nconst Categories = ({ pageContext, data, location }) => {\r\n    const siteTitle = data.site.siteMetadata?.title || `Title`\r\n    const { category } = pageContext\r\n    const { nodes } = data.allMarkdownRemark\r\n    let tags\r\n\r\n    if (category === 'Algorithm') {\r\n        tags = ['ALL','BOJ','PROGRAMMERS','SWEA']\r\n    } else if (category === 'Study') {\r\n        tags = ['ALL','CERTIFICATE', 'CS', 'ETC']\r\n    } else {\r\n        tags =['ALL','PJT', 'KAGGLE', 'BLOG']\r\n        // tags =['ALL','WEB','KOTLIN','KAGGLE', 'BLOG']\r\n    }\r\n\r\n    return (\r\n        <Layout location={location} title={siteTitle}>\r\n            <SEO title=\"All posts\" />\r\n            <div>\r\n                <h2 style={{ textAlign: \"center\", color:\"#C587AE\", margin:20 }}>{category}</h2>\r\n                <div style={{ marginBottom:30, padding:20  }}>\r\n                    <ButtonGroup style={{ boxShadow:\"var(--boxshadow)\", width:\"100%\" }}>\r\n                        {tags.map(tag=> {\r\n                            const tmp = tag === 'ALL' ? \"\" : kebabCase(tag)\r\n                            const url = '/' + category + '/' + tmp\r\n                            return(\r\n                                <Button key={tag} variant=\"light\" style={tag==='ALL' ? {fontWeight:\"bold\", color:\"var(--text)\", border:0, backgroundColor:\"#C587AE\"} : {color:\"var(--text)\", backgroundColor:\"var(--bg)\", border:0, fontWeight:\"bold\"}} href={url}>{tag}</Button>\r\n                                )\r\n                        })}\r\n                    </ButtonGroup>\r\n                    <ol style={{ listStyle: `none`, textAlign:\"left\", marginTop:50 }}>\r\n                        {nodes.map(post => {\r\n                            const title = post.frontmatter.title\r\n                            return(\r\n                                <li style={{ marginTop:20, marginBottom:20 }} key={post.fields.slug}>\r\n                                    <article className=\"post-list-item\" itemScope itemType=\"http://schema.org/Article\">\r\n                                    <header>\r\n                                        <h3 style={{ marginBottom: 0 }}>\r\n                                        <Link style={{ color: \"#8C749F\" }} to={post.frontmatter.path} itemProp=\"url\">\r\n                                            <span itemProp=\"headline\">{title}</span>\r\n                                        </Link>\r\n                                        </h3>\r\n                                        <small style={{color:\"lightgray\"}}>{post.frontmatter.date}</small>\r\n                                    </header>\r\n                                    <section>\r\n                                        <p style={{color:\"gray\"}} dangerouslySetInnerHTML={{ __html: post.frontmatter.description }} itemProp=\"description\" />\r\n                                    </section>\r\n                                    </article>\r\n                                    <hr />\r\n                                </li>\r\n                            )\r\n                        })}\r\n                    </ol>\r\n                </div>\r\n            </div>\r\n        </Layout>\r\n    )\r\n}\r\n\r\n\r\nexport default Categories\r\nexport const pageQuery = graphql`\r\n  query($category: String) {     \r\n    site {\r\n        siteMetadata {\r\n            title\r\n        }\r\n    }\r\n    allMarkdownRemark(\r\n      limit: 2000\r\n      sort: { fields: [frontmatter___date], order: DESC }\r\n      filter: { frontmatter: { category: { eq: $category } } }\r\n    ) {\r\n      totalCount\r\n      nodes {\r\n        fields{\r\n            slug\r\n        }\r\n        frontmatter {\r\n          date(formatString: \"YYYY/MMM/DD\")\r\n          title\r\n          category\r\n          tags\r\n          description\r\n          path\r\n        }\r\n      }\r\n    }\r\n  }\r\n`"],"sourceRoot":""}