{"componentChunkName":"component---src-templates-blog-post-js","path":"/Algorithm/programmers/49189/","result":{"data":{"site":{"siteMetadata":{"title":"Tinnia Blog"}},"markdownRemark":{"id":"93809a00-6be7-564e-bc90-8fbe2edaf6c9","excerpt":"문제 바로가기 문제 설명  n개의 노드가 있는 그래프가 있습니다. 각 노드는 1부터 n까지 번호가 적혀있습니다.…","html":"<br />\n<p><a href=\"https://programmers.co.kr/learn/courses/30/lessons/49189\" style=\"color:#C587AE;text-decoration:none;\"><small>문제 바로가기</small></a></p>\n<h6>문제 설명</h6>\n<p><small> n개의 노드가 있는 그래프가 있습니다. 각 노드는 1부터 n까지 번호가 적혀있습니다. 1번 노드에서 가장 멀리 떨어진 노드의 갯수를 구하려고 합니다. 가장 멀리 떨어진 노드란 최단경로로 이동했을 때 간선의 개수가 가장 많은 노드들을 의미합니다.</small></p>\n<p><small> 노드의 개수 n, 간선에 대한 정보가 담긴 2차원 배열 vertex가 매개변수로 주어질 때, 1번 노드로부터 가장 멀리 떨어진 노드가 몇 개인지를 return 하도록 solution 함수를 작성해주세요.</small></p>\n<h6>제한사항</h6>\n<ul>\n<li><small>노드의 개수 n은 2 이상 20,000 이하입니다.</small></li>\n<li><small>간선은 양방향이며 총 1개 이상 50,000개 이하의 간선이 있습니다.</small></li>\n<li><small>vertex 배열 각 행 [a, b]는 a번 노드와 b번 노드 사이에 간선이 있다는 의미입니다.</small></li>\n</ul>\n<h6>입출력 예</h6>\n<table>\n<thead>\n<tr>\n<th>n</th>\n<th>vertex</th>\n<th>return</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>6</td>\n<td>[[3, 6], [4, 3], [3, 2], [1, 3], [1, 2], [2, 4], [5, 2]]</td>\n<td>3</td>\n</tr>\n</tbody>\n</table>\n<br />\n<h5><h5 style=\"color:#C587AE;\">💻 풀이</h5></h5>\n<p>​\tsetdefaultdict로 양방향 노드를 파악하고, deque를 활용해 최고 깊이를 찾았다.</p>\n<pre class=\"grvsc-container monokai-dimmed grvsc-mm-tuw09S\" data-language=\"python\" data-index=\"0\"><code class=\"grvsc-code\"><span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">from</span><span class=\"mtk1\"> collections </span><span class=\"mtk11\">import</span><span class=\"mtk1\"> deque</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk11\">def</span><span class=\"mtk1\"> </span><span class=\"mtk10\">solution</span><span class=\"mtk1\">(</span><span class=\"mtk3\">n</span><span class=\"mtk1\">, </span><span class=\"mtk3\">edge</span><span class=\"mtk1\">):</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    route </span><span class=\"mtk15\">=</span><span class=\"mtk1\"> </span><span class=\"mtk13\">dict</span><span class=\"mtk1\">()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">for</span><span class=\"mtk1\"> st, ed </span><span class=\"mtk15\">in</span><span class=\"mtk1\"> edge:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        route.setdefault(st, []).append(ed)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        route.setdefault(ed, []).append(st)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    visit </span><span class=\"mtk15\">=</span><span class=\"mtk1\"> [</span><span class=\"mtk15\">-</span><span class=\"mtk3\">1</span><span class=\"mtk1\">] </span><span class=\"mtk15\">*</span><span class=\"mtk1\"> (n </span><span class=\"mtk15\">+</span><span class=\"mtk1\"> </span><span class=\"mtk3\">1</span><span class=\"mtk1\">)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    Q </span><span class=\"mtk15\">=</span><span class=\"mtk1\"> deque()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    Q.append((</span><span class=\"mtk3\">1</span><span class=\"mtk1\">,</span><span class=\"mtk3\">0</span><span class=\"mtk1\">))     </span><span class=\"mtk4\"># (노드 번호, 깊이)</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">while</span><span class=\"mtk1\"> Q:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        idx, d </span><span class=\"mtk15\">=</span><span class=\"mtk1\"> Q.popleft()</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        visit[idx] </span><span class=\"mtk15\">=</span><span class=\"mtk1\"> d</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        </span><span class=\"mtk11\">for</span><span class=\"mtk1\"> i </span><span class=\"mtk15\">in</span><span class=\"mtk1\"> route[idx]:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">            </span><span class=\"mtk11\">if</span><span class=\"mtk1\"> visit[i] </span><span class=\"mtk15\">==</span><span class=\"mtk1\"> </span><span class=\"mtk15\">-</span><span class=\"mtk3\">1</span><span class=\"mtk1\">:</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                visit[i] </span><span class=\"mtk15\">=</span><span class=\"mtk1\"> d</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">                Q.append((i, d</span><span class=\"mtk15\">+</span><span class=\"mtk3\">1</span><span class=\"mtk1\">))</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">        d </span><span class=\"mtk15\">+=</span><span class=\"mtk1\"> </span><span class=\"mtk3\">1</span></span></span>\n<span class=\"grvsc-line\"><span class=\"grvsc-source\"><span class=\"mtk1\">    </span><span class=\"mtk11\">return</span><span class=\"mtk1\"> visit.count(</span><span class=\"mtk11\">max</span><span class=\"mtk1\">(visit))</span></span></span></code></pre>\n<br />\n<style class=\"grvsc-styles\">\n  .grvsc-container {\n    overflow: auto;\n    position: relative;\n    -webkit-overflow-scrolling: touch;\n    padding-top: 1rem;\n    padding-top: var(--grvsc-padding-top, var(--grvsc-padding-v, 1rem));\n    padding-bottom: 1rem;\n    padding-bottom: var(--grvsc-padding-bottom, var(--grvsc-padding-v, 1rem));\n    border-radius: 8px;\n    border-radius: var(--grvsc-border-radius, 8px);\n    font-feature-settings: normal;\n    line-height: 1.4;\n  }\n  \n  .grvsc-code {\n    display: table;\n  }\n  \n  .grvsc-line {\n    display: table-row;\n    box-sizing: border-box;\n    width: 100%;\n    position: relative;\n  }\n  \n  .grvsc-line > * {\n    position: relative;\n  }\n  \n  .grvsc-gutter-pad {\n    display: table-cell;\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  .grvsc-gutter {\n    display: table-cell;\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter::before {\n    content: attr(data-content);\n  }\n  \n  .grvsc-source {\n    display: table-cell;\n    padding-left: 1.5rem;\n    padding-left: var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem));\n    padding-right: 1.5rem;\n    padding-right: var(--grvsc-padding-right, var(--grvsc-padding-h, 1.5rem));\n  }\n  \n  .grvsc-source:empty::after {\n    content: ' ';\n    -webkit-user-select: none;\n    -moz-user-select: none;\n    user-select: none;\n  }\n  \n  .grvsc-gutter + .grvsc-source {\n    padding-left: 0.75rem;\n    padding-left: calc(var(--grvsc-padding-left, var(--grvsc-padding-h, 1.5rem)) / 2);\n  }\n  \n  /* Line transformer styles */\n  \n  .grvsc-has-line-highlighting > .grvsc-code > .grvsc-line::before {\n    content: ' ';\n    position: absolute;\n    width: 100%;\n  }\n  \n  .grvsc-line-diff-add::before {\n    background-color: var(--grvsc-line-diff-add-background-color, rgba(0, 255, 60, 0.2));\n  }\n  \n  .grvsc-line-diff-del::before {\n    background-color: var(--grvsc-line-diff-del-background-color, rgba(255, 0, 20, 0.2));\n  }\n  \n  .grvsc-line-number {\n    padding: 0 2px;\n    text-align: right;\n    opacity: 0.7;\n  }\n  \n  .monokai-dimmed {\n    background-color: #1e1e1e;\n    color: #c5c8c6;\n  }\n  .monokai-dimmed .mtk11 { color: #9872A2; }\n  .monokai-dimmed .mtk1 { color: #C5C8C6FF; }\n  .monokai-dimmed .mtk10 { color: #CE6700; }\n  .monokai-dimmed .mtk3 { color: #6089B4; }\n  .monokai-dimmed .mtk15 { color: #676867; }\n  .monokai-dimmed .mtk13 { color: #C7444A; }\n  .monokai-dimmed .mtk4 { color: #9A9B99; }\n  .monokai-dimmed .grvsc-line-highlighted::before {\n    background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n    box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n  }\n  \n  /* Monokai Dimmed */\n  @media (prefers-color-scheme: dark) {\n    .grvsc-mm-tuw09S {\n      background-color: #1e1e1e;\n      color: #c5c8c6;\n    }\n    .grvsc-mm-tuw09S .mtk11 { color: #9872A2; }\n    .grvsc-mm-tuw09S .mtk1 { color: #C5C8C6FF; }\n    .grvsc-mm-tuw09S .mtk10 { color: #CE6700; }\n    .grvsc-mm-tuw09S .mtk3 { color: #6089B4; }\n    .grvsc-mm-tuw09S .mtk15 { color: #676867; }\n    .grvsc-mm-tuw09S .mtk13 { color: #C7444A; }\n    .grvsc-mm-tuw09S .mtk4 { color: #9A9B99; }\n    .grvsc-mm-tuw09S .grvsc-line-highlighted::before {\n      background-color: var(--grvsc-line-highlighted-background-color, rgba(255, 255, 255, 0.1));\n      box-shadow: inset var(--grvsc-line-highlighted-border-width, 4px) 0 0 0 var(--grvsc-line-highlighted-border-color, rgba(255, 255, 255, 0.5));\n    }\n  }\n</style>","frontmatter":{"title":"[Programmers/Python] 가장 먼 노드","category":"Algorithm","date":"2020/Nov/10","description":"프로그래머스 가장 먼 노드"}},"previous":{"fields":{"slug":"/algorithm/programmers/체육복/"},"frontmatter":{"title":"[Programmers/Python] 체육복","path":"/Algorithm/programmers/42862/"}},"next":{"fields":{"slug":"/portfolio/blog/6/"},"frontmatter":{"title":"[Blog] 04. 페이지 만들기 - URL","path":"/Portfolio/blog/6/"}}},"pageContext":{"id":"93809a00-6be7-564e-bc90-8fbe2edaf6c9","previousPostId":"fb8e6887-78fd-5008-8c5d-89a6edae4640","nextPostId":"4ff133cb-0dc1-5c4f-adf5-26e22b2ff352"}},"staticQueryHashes":["3000541721","3277727212"]}